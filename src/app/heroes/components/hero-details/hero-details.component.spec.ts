import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HeroDetailsComponent } from './hero-details.component';
import { Hero } from '../../../core/models/Hero';

describe('HeroDetailsComponent', () => {
Â  let component: HeroDetailsComponent;
Â  let fixture: ComponentFixture<HeroDetailsComponent>;
Â  const mockHero: Hero = {
    id: 1, name: 'Superman',
    slug: '',
    powerstats: {
      power: 0,
      speed: 0,
      combat: 0,
      strength: 0,
      durability: 0,
      intelligence: 0
    },
    appearance: {
      race: '',
      gender: '',
      height: [],
      weight: [],
      eyeColor: '',
      hairColor: ''
    },
    biography: {
      aliases: [],
      fullName: '',
      alignment: '',
      alterEgos: '',
      publisher: '',
      placeOfBirth: '',
      firstAppearance: ''
    },
    work: {
      base: '',
      occupation: ''
    },
    connections: {
      relatives: '',
      groupAffiliation: ''
    },
    images: {
      lg: '',
      md: '',
      sm: '',
      xs: ''
    }
  }; // ðŸ‘ˆ Crea un hÃ©roe de prueba

Â  beforeEach(async () => {
Â  Â  await TestBed.configureTestingModule({
Â  Â  Â  imports: [HeroDetailsComponent]
Â  Â  }).compileComponents();

Â  Â  fixture = TestBed.createComponent(HeroDetailsComponent);
Â  Â  component = fixture.componentInstance;
Â  Â  // Asigna el hÃ©roe de prueba al componente antes de la detecciÃ³n de cambios
Â  Â  component.hero = mockHero; // ðŸ‘ˆ Â¡Asigna el mock hero aquÃ­!
Â  Â  fixture.detectChanges(); // ðŸ‘ˆ Luego, detecta los cambios para renderizar el template
Â  });

Â  it('should create', () => {
Â  Â  expect(component).toBeTruthy();
Â  });

Â  // Ahora puedes agregar tests para verificar que los datos del mock hero se muestren correctamente en el template.
Â  it('should display the hero name', () => {
Â  Â  const compiled = fixture.nativeElement as HTMLElement;
Â  Â  expect(compiled.querySelector('h2')?.textContent).toContain('Superman');
Â  });
});
